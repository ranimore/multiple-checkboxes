{"version":3,"sources":["ng://multiple-checkboxes/src/app/modules/multiple-checkboxes/multiple-checkboxes.component.ts","ng://multiple-checkboxes/src/app/modules/pipe/filter.pipe.ts","ng://multiple-checkboxes/src/app/modules/multiple-checkboxes/multiple-checkboxes.module.ts"],"names":["MultipleCheckboxesComponent","EventEmitter","Subject","prototype","ngOnInit","_this","this","clicks","pipe","debounceTime","subscribe","e","updatedList","emit","updateSelected","event","currentItem","target","value","masterList","forEach","element","selected","selectedList","map","item","DisplayField","next","updatedListWithFulldata","isSelectall","checked","push","fulldatalist","splice","indexOf","toggeldiv","CollpseIcon","cur","$","collapse","sortByChecked","field","sorted","sort","a","b","reverse","Component","args","selector","template","styles","ViewChild","Input","Output","FilterPipe","transform","items","searchText","toLowerCase","filter","Pipe","name","MultipleCheckboxesModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"qeAAA,IAAAA,EAAA,WA+CI,SAAAA,qBAZsB,IAAIC,EAAAA,0CACM,IAAIA,EAAAA,8BAIhB,oBACJ,qBACE,qBACA,oBACH,eACA,IAAIC,EAAAA,eAMrBF,EAAAG,UAAAC,SAAA,WAAA,IAAAC,EAAAC,KACEA,KAAKC,OAAOC,KACVC,EAAAA,aAAa,MACbC,UAAU,SAAAC,GAAK,OAAAN,EAAKO,YAAYC,KAAKF,MAEzCX,EAAAG,UAAAW,eAAA,SAAeC,EAAMC,GAArB,IAAAX,EAAAC,KAO2B,aAApBS,EAAME,OAAOC,OAEhBZ,KAAKa,WAAWC,QAAQ,SAAAC,GACtBA,EAAQC,UAAS,IAEjBhB,KAAKiB,aAAajB,KAAKa,WAAWK,IAAI,SAAAC,GAAM,OAAAA,EAAKpB,EAAKqB,gBACtDpB,KAAKC,OAAOoB,KAAKrB,KAAKiB,cAExBjB,KAAKsB,wBAAwBf,KAAKP,KAAKa,YACvCb,KAAKuB,aAAY,GAES,eAApBd,EAAME,OAAOC,OAEnBZ,KAAKa,WAAWC,QAAQ,SAAAC,GACtBA,EAAQC,UAAS,IAEnBhB,KAAKiB,aAAa,GAClBjB,KAAKC,OAAOoB,KAAKrB,KAAKiB,cAElBjB,KAAKsB,wBAAwBf,KAAK,IACtCP,KAAKuB,aAAY,IAGbd,EAAME,OAAOa,SACXxB,KAAKiB,aAAaQ,KAAKhB,EAAME,OAAOC,OACxCZ,KAAKC,OAAOoB,KAAKrB,KAAKiB,cAEtBjB,KAAK0B,aAAaD,KAAKf,KAGvBV,KAAKiB,aAAaU,OAAO3B,KAAKiB,aAAaW,QAAQnB,EAAME,OAAOC,OAAQ,GACxEZ,KAAK0B,aAAaC,OAAO3B,KAAK0B,aAAaE,QAAQlB,GAAa,GAChEV,KAAKC,OAAOoB,KAAKrB,KAAKiB,eAJtBjB,KAAKsB,wBAAwBf,KAAKP,KAAK0B,gBAY7ChC,EAAAG,UAAAgC,UAAA,SAAUxB,GAGgB,KAApBL,KAAK8B,YAAoB9B,KAAK8B,YAAc,IAC3C9B,KAAK8B,YAAc,IACxB,IAAIC,EAAMC,EAAE3B,EAAEM,QAAQU,OACtBW,EAAED,GAAKE,SAAS,WAElBvC,EAAAG,UAAAqC,cAAA,SAAcC,GACZ,IAAIC,EAASpC,KAAKa,WAAWwB,KAAK,SAACC,EAAGC,GAAM,OAAAD,EAAEH,GAAS,EAAIG,EAAEH,KAASI,EAAEJ,GAAS,GAAK,IAEtF,OADAC,EAAOI,UACAJ,uBA5GVK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0BACVC,SAAU,8+CAsBVC,OAAQ,CAAC,+xCAGRC,EAAAA,UAASJ,KAAA,CAAC,2BACVK,EAAAA,2BACAC,EAAAA,wCACAA,EAAAA,6BACAD,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,WAvCH,GCAAE,EAAA,gCAKEA,EAAApD,UAAAqD,UAAA,SAAUC,EAAcC,EAAmBjB,GACzC,OAAIgB,EACAC,GACRA,EAAaA,EAAWC,cAKjBF,EAAMG,OAAO,SAAAnC,GAAQ,OAAmD,IAAnDA,EAAKgB,GAAOkB,cAAczB,QAAQwB,MANnCD,EADL,wBALrBI,EAAAA,KAAIb,KAAA,CAAC,CACJc,KAAM,eAFR,GCAAC,EAAA,oDAKCC,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAEFC,aAAc,CAACpE,EAA4BuD,GAC3Cc,QAAQ,CAACrE,SAXX","sourcesContent":["import {Component,OnInit,Input,Output,EventEmitter,ViewChild, ElementRef} from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subject ,Observable} from 'rxjs';\n\ndeclare var $: any;\n\n@Component({\n  selector: 'app-multiple-checkboxes',\n  template: `<div class=\"card border-primary mb-3\" >\n  <div class=\"card-header text-white bg-primary accordion-toggle\" (click)=\"toggeldiv($event)\">{{CollpseIcon}} &nbsp; {{title}}</div>\n  <div class=\"card-body collapse\" id=\"searchdiv\" #top>\n      <input [(ngModel)]=\"SearchText\" class=\"form-control form-control-sm\" type=\"search\" placeholder=\"Search\">\n      <div class=\"card-text card-box\" id=\"style-1\" [style.height.px]=\"height\">\n          <div class=\"\" >\n                  <label class=\"checkbox-container\" *ngIf=\"isSelectall\">\n                          <input type=\"checkbox\"  value=\"selectall\" (change)=\"updateSelected($event,'')\"> Select All\n                          <span class=\"checkmark\"></span>\n                      </label>\n                      <label class=\"checkbox-container\" *ngIf=\"!isSelectall\">\n                              <input type=\"checkbox\" value=\"unselectall\" (change)=\"updateSelected($event,'')\"> Unselect All\n                              <span class=\"checkmark\"></span>\n                          </label>\n              <label class=\"checkbox-container\" *ngFor=\"let item of sortByChecked('selected') | filter : SearchText :DisplayField\">\n                  <input type=\"checkbox\" [(ngModel)]=\"item.selected\" value=\"{{item[DisplayField]}}\" (change)=\"updateSelected($event,item)\"> {{item[DisplayField]}} <span *ngIf=\"item.count\">({{item.count||0}}) </span>\n                  <span class=\"checkmark\"></span>\n              </label>\n          </div>\n      </div>\n  </div>\n</div>`,\n  styles: [`.card-box{overflow-y:auto}.card-header{cursor:pointer}input[type=search]::-webkit-search-cancel-button{-webkit-appearance:searchfield-cancel-button}.checkbox-container{display:block;position:relative;padding-left:22px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.checkbox-container input{position:absolute;opacity:0;cursor:pointer}.checkmark{position:absolute;top:4px;left:0;height:15px;width:15px;background-color:#fff;border:1px solid #ced4db}.checkbox-container:hover input~.checkmark{background-color:#ccc}.checkbox-container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:\"\";position:absolute;display:none}.checkbox-container input:checked~.checkmark:after{display:block}.checkbox-container .checkmark:after{left:4px;top:1px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}::-webkit-scrollbar{width:5px;height:5px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:2px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#006db8}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);border-radius:10px;background-color:#f5f5f5}`]\n})\nexport class MultipleCheckboxesComponent implements OnInit {\n  @ViewChild('top') private top:ElementRef;\n  @Input() masterList;\n  @Output() updatedList = new EventEmitter < any > ();\n  @Output() updatedListWithFulldata=new EventEmitter<any>();\n  @Input() DisplayField;\n  @Input() title;\n  @Input() height?;\n  CollpseIcon: string = '+';\n  SearchText: any = '';\n  selectedList: any = [];\n  isSelectall:boolean=true;\n  fulldatalist:any=[];\n  private clicks = new Subject();\n\n    constructor() {\n \n  }\n\n  ngOnInit() {\n    this.clicks.pipe(\n      debounceTime(500)\n    ).subscribe(e => this.updatedList.emit(e));\n     }\n  updateSelected(event,currentItem) {\n    \n    // this.top.nativeElement.scrollTop=0;\n    // top.scrollTop=0;\n  //  top.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    // =0;\n  //  window.scrollTo(0,0)\n      if(event.target.value=='selectall'){\n     \n      this.masterList.forEach(element => {\n        element.selected=true;\n      });\n        this.selectedList=this.masterList.map(item=>item[this.DisplayField]);\n        this.clicks.next(this.selectedList)\n        // this.updatedList.emit(this.selectedList);\n      this.updatedListWithFulldata.emit(this.masterList);\n      this.isSelectall=false;\n    }\n    else if(event.target.value=='unselectall'){\n\n      this.masterList.forEach(element => {\n        element.selected=false;\n      });\n      this.selectedList=[];\n      this.clicks.next(this.selectedList)\n      // this.updatedList.emit(this.selectedList);\n          this.updatedListWithFulldata.emit([]);\n      this.isSelectall=true;\n    }\n    else{\n      if (event.target.checked) {\n            this.selectedList.push(event.target.value);\n        this.clicks.next(this.selectedList)\n        // this.updatedList.emit(this.selectedList);\n        this.fulldatalist.push(currentItem)\n        this.updatedListWithFulldata.emit(this.fulldatalist);\n      } else {\n        this.selectedList.splice(this.selectedList.indexOf(event.target.value), 1);\n        this.fulldatalist.splice(this.fulldatalist.indexOf(currentItem),1);\n        this.clicks.next(this.selectedList)\n        // this.updatedList.emit(this.selectedList);\n        this.updatedListWithFulldata.emit(this.fulldatalist);\n        \n      }\n    }\n    \n  }\n  toggeldiv(e) {\n    // var text=$(e.target).html()\n    // $(e.target).html(\"+\"+text)\n    if (this.CollpseIcon == '-') this.CollpseIcon = '+'\n    else this.CollpseIcon = '-'\n    let cur = $(e.target).next()\n    $(cur).collapse('toggle');\n  }\n  sortByChecked(field:string){\n    let sorted = this.masterList.sort((a, b) => a[field] ? 1:( a[field]===b[field] ? 0 : -1));\n    sorted.reverse();\n    return sorted;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n  transform(items: any[], searchText: string,field:string): any[] {\r\n    if(!items) return [];\r\n    if(!searchText) return items;\r\nsearchText = searchText.toLowerCase();\r\n// return items.filter( it => {\r\n//     //   return it.includes(searchText);\r\n    \r\n//     });\r\nreturn items.filter(item => item[field].toLowerCase().indexOf(searchText) !== -1);\r\n   }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MultipleCheckboxesComponent } from './multiple-checkboxes.component';\nimport { FormsModule } from '@angular/forms';\nimport {FilterPipe}from '../pipe/filter.pipe'\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [MultipleCheckboxesComponent,FilterPipe],\n  exports:[MultipleCheckboxesComponent]\n})\nexport class MultipleCheckboxesModule { }\n"]}