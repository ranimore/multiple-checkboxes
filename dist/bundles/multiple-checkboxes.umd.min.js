!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs/operators"),require("rxjs"),require("@angular/common"),require("@angular/forms")):"function"==typeof define&&define.amd?define("multiple-checkboxes",["exports","@angular/core","rxjs/operators","rxjs","@angular/common","@angular/forms"],t):t(e["multiple-checkboxes"]={},e.ng.core,e.rxjs.operators,e.rxjs,e.ng.common,e.ng.forms)}(this,function(e,t,s,i,c,r){"use strict";var o=function(){function e(){this.updatedList=new t.EventEmitter,this.updatedListWithFulldata=new t.EventEmitter,this.CollpseIcon="+",this.SearchText="",this.selectedList=[],this.isSelectall=!0,this.fulldatalist=[],this.clicks=new i.Subject}return e.prototype.ngOnInit=function(){var t=this;this.clicks.pipe(s.debounceTime(500)).subscribe(function(e){return t.updatedList.emit(e)})},e.prototype.updateSelected=function(e,t){var s=this;"selectall"==e.target.value?(this.masterList.forEach(function(e){e.selected=!0}),this.selectedList=this.masterList.map(function(e){return e[s.DisplayField]}),this.clicks.next(this.selectedList),this.updatedListWithFulldata.emit(this.masterList),this.isSelectall=!1):"unselectall"==e.target.value?(this.masterList.forEach(function(e){e.selected=!1}),this.selectedList=[],this.clicks.next(this.selectedList),this.updatedListWithFulldata.emit([]),this.isSelectall=!0):(e.target.checked?(this.selectedList.push(e.target.value),this.clicks.next(this.selectedList),this.fulldatalist.push(t)):(this.selectedList.splice(this.selectedList.indexOf(e.target.value),1),this.fulldatalist.splice(this.fulldatalist.indexOf(t),1),this.clicks.next(this.selectedList)),this.updatedListWithFulldata.emit(this.fulldatalist))},e.prototype.toggeldiv=function(e){"-"==this.CollpseIcon?this.CollpseIcon="+":this.CollpseIcon="-";var t=$(e.target).next();$(t).collapse("toggle")},e.prototype.sortByChecked=function(s){var e=this.masterList.sort(function(e,t){return e[s]?1:e[s]===t[s]?0:-1});return e.reverse(),e},e.decorators=[{type:t.Component,args:[{selector:"app-multiple-checkboxes",template:'<div class="card border-primary mb-3" >\n  <div class="card-header text-white bg-primary accordion-toggle" (click)="toggeldiv($event)">{{CollpseIcon}} &nbsp; {{title}}</div>\n  <div class="card-body collapse" id="searchdiv" #top>\n      <input [(ngModel)]="SearchText" class="form-control form-control-sm" type="search" placeholder="Search">\n      <div class="card-text card-box" id="style-1">\n          <div class="" >\n                  <label class="checkbox-container" *ngIf="isSelectall">\n                          <input type="checkbox"  value="selectall" (change)="updateSelected($event,\'\')"> Select All\n                          <span class="checkmark"></span>\n                      </label>\n                      <label class="checkbox-container" *ngIf="!isSelectall">\n                              <input type="checkbox" value="unselectall" (change)="updateSelected($event,\'\')"> Unselect All\n                              <span class="checkmark"></span>\n                          </label>\n              <label class="checkbox-container" *ngFor="let item of sortByChecked(\'selected\') | filter : SearchText :DisplayField">\n                  <input type="checkbox" [(ngModel)]="item.selected" value="{{item[DisplayField]}}" (change)="updateSelected($event,item)"> {{item[DisplayField]}} <span *ngIf="item.count">({{item.count||0}}) </span>\n                  <span class="checkmark"></span>\n              </label>\n          </div>\n      </div>\n  </div>\n</div>',styles:['.card-box{height:150px;overflow-y:auto}.card-header{cursor:pointer}input[type=search]::-webkit-search-cancel-button{-webkit-appearance:searchfield-cancel-button}.checkbox-container{display:block;position:relative;padding-left:22px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.checkbox-container input{position:absolute;opacity:0;cursor:pointer}.checkmark{position:absolute;top:4px;left:0;height:15px;width:15px;background-color:#fff;border:1px solid #ced4db}.checkbox-container:hover input~.checkmark{background-color:#ccc}.checkbox-container input:checked~.checkmark{background-color:#2196f3}.checkmark:after{content:"";position:absolute;display:none}.checkbox-container input:checked~.checkmark:after{display:block}.checkbox-container .checkmark:after{left:4px;top:1px;width:5px;height:10px;border:solid #fff;border-width:0 3px 3px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}::-webkit-scrollbar{width:5px;height:5px;background-color:#f5f5f5}::-webkit-scrollbar-thumb{border-radius:2px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#006db8}::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);border-radius:10px;background-color:#f5f5f5}']}]}],e.ctorParameters=function(){return[]},e.propDecorators={top:[{type:t.ViewChild,args:["top"]}],masterList:[{type:t.Input}],updatedList:[{type:t.Output}],updatedListWithFulldata:[{type:t.Output}],DisplayField:[{type:t.Input}],title:[{type:t.Input}]},e}(),a=function(){function e(){}return e.prototype.transform=function(e,t,s){return e?t?(t=t.toLowerCase(),e.filter(function(e){return-1!==e[s].toLowerCase().indexOf(t)})):e:[]},e.decorators=[{type:t.Pipe,args:[{name:"filter"}]}],e}(),l=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[c.CommonModule,r.FormsModule],declarations:[o,a],exports:[o]}]}],e}();e.MultipleCheckboxesModule=l,e.ɵa=o,e.ɵb=a,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=multiple-checkboxes.umd.min.js.map